from swmm.pandas.input._section_classes import _sections as sections
from swmm.pandas.input.model import Input
import argparse
from textwrap import dedent


def generate_input_file_methods():

    out_str = dedent(
        """\
        #region
        # This section is autgenerated by scripts/generate_input_sections.py
        """
    )

    for section, obj in sections.items():
        # # Type hints only
        # sectstring = f"{obj.__name__.lower()}: sc.{obj.__name__}\n"
        # if hasattr(obj, "headings"):
        #     sectstring += f'"{obj.headings}"\n'
        # out_str += sectstring
        docstring = ""
        if hasattr(obj, "headings"):
            idx = (
                tuple(obj._index_col)
                if isinstance(obj._index_col, list)
                else f"({obj._index_col!r})"
            )
            docstring += f'"{idx}{obj._data_cols()}"\n'
        elif isinstance(doc := obj.__doc__, str):
            string = doc.strip().strip("\n").splitlines()[0]
            docstring += f'"{string}"\n'
        sectstring = dedent(
            f"""\
                @property
                def {obj.__name__.lower()}(self) -> sc.{obj.__name__}:
                    {docstring if len(docstring)>0 else ''}
                    if not hasattr(self, "_{obj.__name__.lower()}"):
                        self._{obj.__name__.lower()} = self._get_section("{section}")

                    return self._{obj.__name__.lower()}

                @{obj.__name__.lower()}.setter
                def {obj.__name__.lower()}(self, obj) -> None:
                    self._{obj.__name__.lower()} = sc.{obj.__name__}._newobj(obj)
            """
        )
        out_str += sectstring
    print(out_str)


def generate_input_methods():
    out_str = dedent(
        """\
        #region
        # This section is autgenerated by scripts/generate_input_sections.py
    """
    )
    for section, obj in sections.items():
        docstring = ""
        if hasattr(Input, obj.__name__.lower()):
            continue
        else:
            # print(obj.__name__.lower())
            # Type hints only

            if hasattr(obj, "headings"):
                idx = (
                    tuple(obj._index_col)
                    if isinstance(obj._index_col, list)
                    else f"({obj._index_col!r})"
                )
                docstring += f'"{idx}{obj._data_cols()}"\n'
            elif isinstance(doc := obj.__doc__, str):
                string = doc.strip().strip("\n").splitlines()[0]
                docstring += f'"{string}"\n'
            sectstring = dedent(
                f"""\
                @property
                def {obj.__name__.lower()}(self) -> sc.{obj.__name__}:
                    {docstring if len(docstring)>0 else ''}
                    return self.inp.{obj.__name__.lower()}

                @{obj.__name__.lower()}.setter
                def {obj.__name__.lower()}(self, obj) -> None:
                    self.inp.{obj.__name__.lower()} = obj

            """
            )
            out_str += sectstring
    print(out_str)


if __name__ == "__main__":
    generate_input_methods()
